{"ast":null,"code":"import { Vue } from '../vue';\nimport { IS_BROWSER } from '../constants/env';\nimport { EVENT_OPTIONS_NO_CAPTURE } from '../constants/events';\nimport { arrayIncludes } from '../utils/array';\nimport { eventOn, eventOff } from '../utils/events';\nimport { keys } from '../utils/object'; // --- Constants ---\n\nvar PROP = '$_windowListeners'; // --- Mixin ---\n// @vue/component\n\nexport var listenOnWindowMixin = Vue.extend({\n  created: function created() {\n    // Define non-reactive property\n    // Object of arrays, keyed by event name,\n    // where value is an array of callbacks\n    this[PROP] = {};\n  },\n  beforeDestroy: function beforeDestroy() {\n    var _this = this; // Unregister all registered listeners\n\n\n    keys(this[PROP] || {}).forEach(function (event) {\n      _this[PROP][event].forEach(function (callback) {\n        _this.listenOffWindow(event, callback);\n      });\n    });\n    this[PROP] = null;\n  },\n  methods: {\n    registerWindowListener: function registerWindowListener(event, callback) {\n      if (this[PROP]) {\n        this[PROP][event] = this[PROP][event] || [];\n\n        if (!arrayIncludes(this[PROP][event], callback)) {\n          this[PROP][event].push(callback);\n        }\n      }\n    },\n    unregisterWindowListener: function unregisterWindowListener(event, callback) {\n      if (this[PROP] && this[PROP][event]) {\n        this[PROP][event] = this[PROP][event].filter(function (cb) {\n          return cb !== callback;\n        });\n      }\n    },\n    listenWindow: function listenWindow(on, event, callback) {\n      on ? this.listenOnWindow(event, callback) : this.listenOffWindow(event, callback);\n    },\n    listenOnWindow: function listenOnWindow(event, callback) {\n      if (IS_BROWSER) {\n        eventOn(window, event, callback, EVENT_OPTIONS_NO_CAPTURE);\n        this.registerWindowListener(event, callback);\n      }\n    },\n    listenOffWindow: function listenOffWindow(event, callback) {\n      if (IS_BROWSER) {\n        eventOff(window, event, callback, EVENT_OPTIONS_NO_CAPTURE);\n      }\n\n      this.unregisterWindowListener(event, callback);\n    }\n  }\n});","map":{"version":3,"sources":["E:/KULIAH/SEKERIPSI/PROGRESS/OTW/FRONTEND/mls-frontend_v2/node_modules/bootstrap-vue/esm/mixins/listen-on-window.js"],"names":["Vue","IS_BROWSER","EVENT_OPTIONS_NO_CAPTURE","arrayIncludes","eventOn","eventOff","keys","PROP","listenOnWindowMixin","extend","created","beforeDestroy","_this","forEach","event","callback","listenOffWindow","methods","registerWindowListener","push","unregisterWindowListener","filter","cb","listenWindow","on","listenOnWindow","window"],"mappings":"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","sourcesContent":["import { Vue } from '../vue';\nimport { IS_BROWSER } from '../constants/env';\nimport { EVENT_OPTIONS_NO_CAPTURE } from '../constants/events';\nimport { arrayIncludes } from '../utils/array';\nimport { eventOn, eventOff } from '../utils/events';\nimport { keys } from '../utils/object'; // --- Constants ---\n\nvar PROP = '$_windowListeners'; // --- Mixin ---\n// @vue/component\n\nexport var listenOnWindowMixin = Vue.extend({\n  created: function created() {\n    // Define non-reactive property\n    // Object of arrays, keyed by event name,\n    // where value is an array of callbacks\n    this[PROP] = {};\n  },\n  beforeDestroy: function beforeDestroy() {\n    var _this = this;\n\n    // Unregister all registered listeners\n    keys(this[PROP] || {}).forEach(function (event) {\n      _this[PROP][event].forEach(function (callback) {\n        _this.listenOffWindow(event, callback);\n      });\n    });\n    this[PROP] = null;\n  },\n  methods: {\n    registerWindowListener: function registerWindowListener(event, callback) {\n      if (this[PROP]) {\n        this[PROP][event] = this[PROP][event] || [];\n\n        if (!arrayIncludes(this[PROP][event], callback)) {\n          this[PROP][event].push(callback);\n        }\n      }\n    },\n    unregisterWindowListener: function unregisterWindowListener(event, callback) {\n      if (this[PROP] && this[PROP][event]) {\n        this[PROP][event] = this[PROP][event].filter(function (cb) {\n          return cb !== callback;\n        });\n      }\n    },\n    listenWindow: function listenWindow(on, event, callback) {\n      on ? this.listenOnWindow(event, callback) : this.listenOffWindow(event, callback);\n    },\n    listenOnWindow: function listenOnWindow(event, callback) {\n      if (IS_BROWSER) {\n        eventOn(window, event, callback, EVENT_OPTIONS_NO_CAPTURE);\n        this.registerWindowListener(event, callback);\n      }\n    },\n    listenOffWindow: function listenOffWindow(event, callback) {\n      if (IS_BROWSER) {\n        eventOff(window, event, callback, EVENT_OPTIONS_NO_CAPTURE);\n      }\n\n      this.unregisterWindowListener(event, callback);\n    }\n  }\n});"]},"metadata":{},"sourceType":"module"}