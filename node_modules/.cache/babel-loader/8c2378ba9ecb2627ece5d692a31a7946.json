{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { Vue } from '../../../vue';\nimport { EVENT_NAME_CONTEXT_CHANGED, EVENT_NAME_FILTERED, EVENT_NAME_ROW_CLICKED, EVENT_NAME_ROW_SELECTED } from '../../../constants/events';\nimport { PROP_TYPE_BOOLEAN, PROP_TYPE_STRING } from '../../../constants/props';\nimport { arrayIncludes, createArray } from '../../../utils/array';\nimport { identity } from '../../../utils/identity';\nimport { isArray, isNumber } from '../../../utils/inspect';\nimport { looseEqual } from '../../../utils/loose-equal';\nimport { mathMax, mathMin } from '../../../utils/math';\nimport { makeProp } from '../../../utils/props';\nimport { toString } from '../../../utils/string';\nimport { sanitizeRow } from './sanitize-row'; // --- Constants ---\n\nvar SELECT_MODES = ['range', 'multi', 'single'];\nvar ROLE_GRID = 'grid'; // --- Props ---\n\nexport var props = {\n  // Disable use of click handlers for row selection\n  noSelectOnClick: makeProp(PROP_TYPE_BOOLEAN, false),\n  selectMode: makeProp(PROP_TYPE_STRING, 'multi', function (value) {\n    return arrayIncludes(SELECT_MODES, value);\n  }),\n  selectable: makeProp(PROP_TYPE_BOOLEAN, false),\n  selectedVariant: makeProp(PROP_TYPE_STRING, 'active')\n}; // --- Mixin ---\n// @vue/component\n\nexport var selectableMixin = Vue.extend({\n  props: props,\n  data: function data() {\n    return {\n      selectedRows: [],\n      selectedLastRow: -1\n    };\n  },\n  computed: {\n    isSelectable: function isSelectable() {\n      return this.selectable && this.selectMode;\n    },\n    hasSelectableRowClick: function hasSelectableRowClick() {\n      return this.isSelectable && !this.noSelectOnClick;\n    },\n    supportsSelectableRows: function supportsSelectableRows() {\n      return true;\n    },\n    selectableHasSelection: function selectableHasSelection() {\n      var selectedRows = this.selectedRows;\n      return this.isSelectable && selectedRows && selectedRows.length > 0 && selectedRows.some(identity);\n    },\n    selectableIsMultiSelect: function selectableIsMultiSelect() {\n      return this.isSelectable && arrayIncludes(['range', 'multi'], this.selectMode);\n    },\n    selectableTableClasses: function selectableTableClasses() {\n      var _ref;\n\n      var isSelectable = this.isSelectable;\n      return _ref = {\n        'b-table-selectable': isSelectable\n      }, _defineProperty(_ref, \"b-table-select-\".concat(this.selectMode), isSelectable), _defineProperty(_ref, 'b-table-selecting', this.selectableHasSelection), _defineProperty(_ref, 'b-table-selectable-no-click', isSelectable && !this.hasSelectableRowClick), _ref;\n    },\n    selectableTableAttrs: function selectableTableAttrs() {\n      if (!this.isSelectable) {\n        return {};\n      }\n\n      var role = this.bvAttrs.role || ROLE_GRID;\n      return {\n        role: role,\n        // TODO:\n        //   Should this attribute not be included when `no-select-on-click` is set\n        //   since this attribute implies keyboard navigation?\n        'aria-multiselectable': role === ROLE_GRID ? toString(this.selectableIsMultiSelect) : null\n      };\n    }\n  },\n  watch: {\n    computedItems: function computedItems(newValue, oldValue) {\n      // Reset for selectable\n      var equal = false;\n\n      if (this.isSelectable && this.selectedRows.length > 0) {\n        // Quick check against array length\n        equal = isArray(newValue) && isArray(oldValue) && newValue.length === oldValue.length;\n\n        for (var i = 0; equal && i < newValue.length; i++) {\n          // Look for the first non-loosely equal row, after ignoring reserved fields\n          equal = looseEqual(sanitizeRow(newValue[i]), sanitizeRow(oldValue[i]));\n        }\n      }\n\n      if (!equal) {\n        this.clearSelected();\n      }\n    },\n    selectable: function selectable(newValue) {\n      this.clearSelected();\n      this.setSelectionHandlers(newValue);\n    },\n    selectMode: function selectMode() {\n      this.clearSelected();\n    },\n    hasSelectableRowClick: function hasSelectableRowClick(newValue) {\n      this.clearSelected();\n      this.setSelectionHandlers(!newValue);\n    },\n    selectedRows: function selectedRows(_selectedRows, oldValue) {\n      var _this = this;\n\n      if (this.isSelectable && !looseEqual(_selectedRows, oldValue)) {\n        var items = []; // `.forEach()` skips over non-existent indices (on sparse arrays)\n\n        _selectedRows.forEach(function (v, idx) {\n          if (v) {\n            items.push(_this.computedItems[idx]);\n          }\n        });\n\n        this.$emit(EVENT_NAME_ROW_SELECTED, items);\n      }\n    }\n  },\n  beforeMount: function beforeMount() {\n    // Set up handlers if needed\n    if (this.isSelectable) {\n      this.setSelectionHandlers(true);\n    }\n  },\n  methods: {\n    // Public methods\n    selectRow: function selectRow(index) {\n      // Select a particular row (indexed based on computedItems)\n      if (this.isSelectable && isNumber(index) && index >= 0 && index < this.computedItems.length && !this.isRowSelected(index)) {\n        var selectedRows = this.selectableIsMultiSelect ? this.selectedRows.slice() : [];\n        selectedRows[index] = true;\n        this.selectedLastClicked = -1;\n        this.selectedRows = selectedRows;\n      }\n    },\n    unselectRow: function unselectRow(index) {\n      // Un-select a particular row (indexed based on `computedItems`)\n      if (this.isSelectable && isNumber(index) && this.isRowSelected(index)) {\n        var selectedRows = this.selectedRows.slice();\n        selectedRows[index] = false;\n        this.selectedLastClicked = -1;\n        this.selectedRows = selectedRows;\n      }\n    },\n    selectAllRows: function selectAllRows() {\n      var length = this.computedItems.length;\n\n      if (this.isSelectable && length > 0) {\n        this.selectedLastClicked = -1;\n        this.selectedRows = this.selectableIsMultiSelect ? createArray(length, true) : [true];\n      }\n    },\n    isRowSelected: function isRowSelected(index) {\n      // Determine if a row is selected (indexed based on `computedItems`)\n      return !!(isNumber(index) && this.selectedRows[index]);\n    },\n    clearSelected: function clearSelected() {\n      // Clear any active selected row(s)\n      this.selectedLastClicked = -1;\n      this.selectedRows = [];\n    },\n    // Internal private methods\n    selectableRowClasses: function selectableRowClasses(index) {\n      if (this.isSelectable && this.isRowSelected(index)) {\n        var variant = this.selectedVariant;\n        return _defineProperty({\n          'b-table-row-selected': true\n        }, \"\".concat(this.dark ? 'bg' : 'table', \"-\").concat(variant), variant);\n      }\n\n      return {};\n    },\n    selectableRowAttrs: function selectableRowAttrs(index) {\n      return {\n        'aria-selected': !this.isSelectable ? null : this.isRowSelected(index) ? 'true' : 'false'\n      };\n    },\n    setSelectionHandlers: function setSelectionHandlers(on) {\n      var method = on && !this.noSelectOnClick ? '$on' : '$off'; // Handle row-clicked event\n\n      this[method](EVENT_NAME_ROW_CLICKED, this.selectionHandler); // Clear selection on filter, pagination, and sort changes\n\n      this[method](EVENT_NAME_FILTERED, this.clearSelected);\n      this[method](EVENT_NAME_CONTEXT_CHANGED, this.clearSelected);\n    },\n    selectionHandler: function selectionHandler(item, index, event) {\n      /* istanbul ignore if: should never happen */\n      if (!this.isSelectable || this.noSelectOnClick) {\n        // Don't do anything if table is not in selectable mode\n        this.clearSelected();\n        return;\n      }\n\n      var selectMode = this.selectMode,\n          selectedLastRow = this.selectedLastRow;\n      var selectedRows = this.selectedRows.slice();\n      var selected = !selectedRows[index]; // Note 'multi' mode needs no special event handling\n\n      if (selectMode === 'single') {\n        selectedRows = [];\n      } else if (selectMode === 'range') {\n        if (selectedLastRow > -1 && event.shiftKey) {\n          // range\n          for (var idx = mathMin(selectedLastRow, index); idx <= mathMax(selectedLastRow, index); idx++) {\n            selectedRows[idx] = true;\n          }\n\n          selected = true;\n        } else {\n          if (!(event.ctrlKey || event.metaKey)) {\n            // Clear range selection if any\n            selectedRows = [];\n            selected = true;\n          }\n\n          if (selected) this.selectedLastRow = index;\n        }\n      }\n\n      selectedRows[index] = selected;\n      this.selectedRows = selectedRows;\n    }\n  }\n});","map":{"version":3,"sources":["E:/KULIAH/SEKERIPSI/PROGRESS/OTW/FRONTEND/mls-frontend_v2/node_modules/bootstrap-vue/esm/components/table/helpers/mixin-selectable.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","Vue","EVENT_NAME_CONTEXT_CHANGED","EVENT_NAME_FILTERED","EVENT_NAME_ROW_CLICKED","EVENT_NAME_ROW_SELECTED","PROP_TYPE_BOOLEAN","PROP_TYPE_STRING","arrayIncludes","createArray","identity","isArray","isNumber","looseEqual","mathMax","mathMin","makeProp","toString","sanitizeRow","SELECT_MODES","ROLE_GRID","props","noSelectOnClick","selectMode","selectable","selectedVariant","selectableMixin","extend","data","selectedRows","selectedLastRow","computed","isSelectable","hasSelectableRowClick","supportsSelectableRows","selectableHasSelection","length","some","selectableIsMultiSelect","selectableTableClasses","_ref","concat","selectableTableAttrs","role","bvAttrs","watch","computedItems","newValue","oldValue","equal","i","clearSelected","setSelectionHandlers","_selectedRows","_this","items","forEach","v","idx","push","$emit","beforeMount","methods","selectRow","index","isRowSelected","slice","selectedLastClicked","unselectRow","selectAllRows","selectableRowClasses","variant","dark","selectableRowAttrs","on","method","selectionHandler","item","event","selected","shiftKey","ctrlKey","metaKey"],"mappings":"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","sourcesContent":["function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Vue } from '../../../vue';\nimport { EVENT_NAME_CONTEXT_CHANGED, EVENT_NAME_FILTERED, EVENT_NAME_ROW_CLICKED, EVENT_NAME_ROW_SELECTED } from '../../../constants/events';\nimport { PROP_TYPE_BOOLEAN, PROP_TYPE_STRING } from '../../../constants/props';\nimport { arrayIncludes, createArray } from '../../../utils/array';\nimport { identity } from '../../../utils/identity';\nimport { isArray, isNumber } from '../../../utils/inspect';\nimport { looseEqual } from '../../../utils/loose-equal';\nimport { mathMax, mathMin } from '../../../utils/math';\nimport { makeProp } from '../../../utils/props';\nimport { toString } from '../../../utils/string';\nimport { sanitizeRow } from './sanitize-row'; // --- Constants ---\n\nvar SELECT_MODES = ['range', 'multi', 'single'];\nvar ROLE_GRID = 'grid'; // --- Props ---\n\nexport var props = {\n  // Disable use of click handlers for row selection\n  noSelectOnClick: makeProp(PROP_TYPE_BOOLEAN, false),\n  selectMode: makeProp(PROP_TYPE_STRING, 'multi', function (value) {\n    return arrayIncludes(SELECT_MODES, value);\n  }),\n  selectable: makeProp(PROP_TYPE_BOOLEAN, false),\n  selectedVariant: makeProp(PROP_TYPE_STRING, 'active')\n}; // --- Mixin ---\n// @vue/component\n\nexport var selectableMixin = Vue.extend({\n  props: props,\n  data: function data() {\n    return {\n      selectedRows: [],\n      selectedLastRow: -1\n    };\n  },\n  computed: {\n    isSelectable: function isSelectable() {\n      return this.selectable && this.selectMode;\n    },\n    hasSelectableRowClick: function hasSelectableRowClick() {\n      return this.isSelectable && !this.noSelectOnClick;\n    },\n    supportsSelectableRows: function supportsSelectableRows() {\n      return true;\n    },\n    selectableHasSelection: function selectableHasSelection() {\n      var selectedRows = this.selectedRows;\n      return this.isSelectable && selectedRows && selectedRows.length > 0 && selectedRows.some(identity);\n    },\n    selectableIsMultiSelect: function selectableIsMultiSelect() {\n      return this.isSelectable && arrayIncludes(['range', 'multi'], this.selectMode);\n    },\n    selectableTableClasses: function selectableTableClasses() {\n      var _ref;\n\n      var isSelectable = this.isSelectable;\n      return _ref = {\n        'b-table-selectable': isSelectable\n      }, _defineProperty(_ref, \"b-table-select-\".concat(this.selectMode), isSelectable), _defineProperty(_ref, 'b-table-selecting', this.selectableHasSelection), _defineProperty(_ref, 'b-table-selectable-no-click', isSelectable && !this.hasSelectableRowClick), _ref;\n    },\n    selectableTableAttrs: function selectableTableAttrs() {\n      if (!this.isSelectable) {\n        return {};\n      }\n\n      var role = this.bvAttrs.role || ROLE_GRID;\n      return {\n        role: role,\n        // TODO:\n        //   Should this attribute not be included when `no-select-on-click` is set\n        //   since this attribute implies keyboard navigation?\n        'aria-multiselectable': role === ROLE_GRID ? toString(this.selectableIsMultiSelect) : null\n      };\n    }\n  },\n  watch: {\n    computedItems: function computedItems(newValue, oldValue) {\n      // Reset for selectable\n      var equal = false;\n\n      if (this.isSelectable && this.selectedRows.length > 0) {\n        // Quick check against array length\n        equal = isArray(newValue) && isArray(oldValue) && newValue.length === oldValue.length;\n\n        for (var i = 0; equal && i < newValue.length; i++) {\n          // Look for the first non-loosely equal row, after ignoring reserved fields\n          equal = looseEqual(sanitizeRow(newValue[i]), sanitizeRow(oldValue[i]));\n        }\n      }\n\n      if (!equal) {\n        this.clearSelected();\n      }\n    },\n    selectable: function selectable(newValue) {\n      this.clearSelected();\n      this.setSelectionHandlers(newValue);\n    },\n    selectMode: function selectMode() {\n      this.clearSelected();\n    },\n    hasSelectableRowClick: function hasSelectableRowClick(newValue) {\n      this.clearSelected();\n      this.setSelectionHandlers(!newValue);\n    },\n    selectedRows: function selectedRows(_selectedRows, oldValue) {\n      var _this = this;\n\n      if (this.isSelectable && !looseEqual(_selectedRows, oldValue)) {\n        var items = []; // `.forEach()` skips over non-existent indices (on sparse arrays)\n\n        _selectedRows.forEach(function (v, idx) {\n          if (v) {\n            items.push(_this.computedItems[idx]);\n          }\n        });\n\n        this.$emit(EVENT_NAME_ROW_SELECTED, items);\n      }\n    }\n  },\n  beforeMount: function beforeMount() {\n    // Set up handlers if needed\n    if (this.isSelectable) {\n      this.setSelectionHandlers(true);\n    }\n  },\n  methods: {\n    // Public methods\n    selectRow: function selectRow(index) {\n      // Select a particular row (indexed based on computedItems)\n      if (this.isSelectable && isNumber(index) && index >= 0 && index < this.computedItems.length && !this.isRowSelected(index)) {\n        var selectedRows = this.selectableIsMultiSelect ? this.selectedRows.slice() : [];\n        selectedRows[index] = true;\n        this.selectedLastClicked = -1;\n        this.selectedRows = selectedRows;\n      }\n    },\n    unselectRow: function unselectRow(index) {\n      // Un-select a particular row (indexed based on `computedItems`)\n      if (this.isSelectable && isNumber(index) && this.isRowSelected(index)) {\n        var selectedRows = this.selectedRows.slice();\n        selectedRows[index] = false;\n        this.selectedLastClicked = -1;\n        this.selectedRows = selectedRows;\n      }\n    },\n    selectAllRows: function selectAllRows() {\n      var length = this.computedItems.length;\n\n      if (this.isSelectable && length > 0) {\n        this.selectedLastClicked = -1;\n        this.selectedRows = this.selectableIsMultiSelect ? createArray(length, true) : [true];\n      }\n    },\n    isRowSelected: function isRowSelected(index) {\n      // Determine if a row is selected (indexed based on `computedItems`)\n      return !!(isNumber(index) && this.selectedRows[index]);\n    },\n    clearSelected: function clearSelected() {\n      // Clear any active selected row(s)\n      this.selectedLastClicked = -1;\n      this.selectedRows = [];\n    },\n    // Internal private methods\n    selectableRowClasses: function selectableRowClasses(index) {\n      if (this.isSelectable && this.isRowSelected(index)) {\n        var variant = this.selectedVariant;\n        return _defineProperty({\n          'b-table-row-selected': true\n        }, \"\".concat(this.dark ? 'bg' : 'table', \"-\").concat(variant), variant);\n      }\n\n      return {};\n    },\n    selectableRowAttrs: function selectableRowAttrs(index) {\n      return {\n        'aria-selected': !this.isSelectable ? null : this.isRowSelected(index) ? 'true' : 'false'\n      };\n    },\n    setSelectionHandlers: function setSelectionHandlers(on) {\n      var method = on && !this.noSelectOnClick ? '$on' : '$off'; // Handle row-clicked event\n\n      this[method](EVENT_NAME_ROW_CLICKED, this.selectionHandler); // Clear selection on filter, pagination, and sort changes\n\n      this[method](EVENT_NAME_FILTERED, this.clearSelected);\n      this[method](EVENT_NAME_CONTEXT_CHANGED, this.clearSelected);\n    },\n    selectionHandler: function selectionHandler(item, index, event) {\n      /* istanbul ignore if: should never happen */\n      if (!this.isSelectable || this.noSelectOnClick) {\n        // Don't do anything if table is not in selectable mode\n        this.clearSelected();\n        return;\n      }\n\n      var selectMode = this.selectMode,\n          selectedLastRow = this.selectedLastRow;\n      var selectedRows = this.selectedRows.slice();\n      var selected = !selectedRows[index]; // Note 'multi' mode needs no special event handling\n\n      if (selectMode === 'single') {\n        selectedRows = [];\n      } else if (selectMode === 'range') {\n        if (selectedLastRow > -1 && event.shiftKey) {\n          // range\n          for (var idx = mathMin(selectedLastRow, index); idx <= mathMax(selectedLastRow, index); idx++) {\n            selectedRows[idx] = true;\n          }\n\n          selected = true;\n        } else {\n          if (!(event.ctrlKey || event.metaKey)) {\n            // Clear range selection if any\n            selectedRows = [];\n            selected = true;\n          }\n\n          if (selected) this.selectedLastRow = index;\n        }\n      }\n\n      selectedRows[index] = selected;\n      this.selectedRows = selectedRows;\n    }\n  }\n});"]},"metadata":{},"sourceType":"module"}